[
  {
    "objectID": "posts/website-with-quarto-automated-deployment/index.html",
    "href": "posts/website-with-quarto-automated-deployment/index.html",
    "title": "Set up a website with Quarto and automate deployment",
    "section": "",
    "text": "Anyone who works with data analysis and wants to share content faces some limitations from the traditional tools to build a website. One of the main reasons is the difficulty of sharing the results of chunks of code without needing to copy and paste images.\nFor example, suppose you are a data scientist and use Python or R to build interactive charts and tables in your work. In that case, it might be difficult to be able to publish this kind of result on a website using the traditional platforms.\nThere are already many available solutions that facilitate this job. But here I want to draw attention to Quarto."
  },
  {
    "objectID": "posts/website-with-quarto-automated-deployment/index.html#what-is-quarto",
    "href": "posts/website-with-quarto-automated-deployment/index.html#what-is-quarto",
    "title": "Set up a website with Quarto and automate deployment",
    "section": "What is Quarto?",
    "text": "What is Quarto?\nQuarto is a great reporting tool, which is supported by RStudio. Its own definition is:\n\nQuarto is an open-source scientific and technical publishing system built on Pandoc.\n\nIn Quarto, you can ‚Äúcreate dynamic content with Python, R, Julia, and Observable‚Äù.\nIn other words, with Quarto, it is possible to create reports using the same syntax used to build RMarkdown documents, but in Quarto there are more possibilities when compared with RMarkdown.\nOne of the biggest Quarto advantages is that it is a multi-language platform. Besides that, RStudio announces that Quarto is the ‚Äúnext generation version of R Markdown‚Äù."
  },
  {
    "objectID": "posts/website-with-quarto-automated-deployment/index.html#basic-workflow-for-a-quarto-website-with-automated-deployment",
    "href": "posts/website-with-quarto-automated-deployment/index.html#basic-workflow-for-a-quarto-website-with-automated-deployment",
    "title": "Set up a website with Quarto and automate deployment",
    "section": "Basic workflow for a Quarto website with automated deployment",
    "text": "Basic workflow for a Quarto website with automated deployment\nAfter taking a look to Quarto documentation and watching a video (Pt) about automated deployment with Github Actions, I realized that it could be easier than I thought to set up a personal blog with the requirements that I had for this purpose.\nSo, the workflow I built using Quarto had as a result this website (check the Github repo), and works like described below:\n\nWrite a post or build a static page (locally).\nRender the website (locally).\nPush it to Git.\nAfter a merge in certain branch, automate the deployment process (upload the files via FTP)."
  },
  {
    "objectID": "posts/website-with-quarto-automated-deployment/index.html#steps-to-create-an-automated-quarto-website",
    "href": "posts/website-with-quarto-automated-deployment/index.html#steps-to-create-an-automated-quarto-website",
    "title": "Set up a website with Quarto and automate deployment",
    "section": "Steps to create an automated Quarto website",
    "text": "Steps to create an automated Quarto website\nQuarto documentation is great. Basically, all you need to know how to create a website with Quarto is to read this session in their website.\nBelow I am sharing the main commands that you will need, and also the needed information to set up the automated deployment.\n\nStep 1. Download and install Quarto\nIf you don‚Äôt have Quarto installed yet you can follow the steps here.\n\n\nStep 2. Build a Quarto website or blog\nAfter having installed Quarto, it is needed to run on terminal the following code to create a Quarto website:\nquarto create-project mysite --type website\nIf your website will be a blog, so you may prefer to use the following code:\nquarto create-project myblog --type website:blog\nThis code will create a basic folder structure with the main files needed to start customizing your website.\n\n\nStep 3. Create a repo on Github\nTo be able to benefit from Github Actions, which we will use to automate the publishing workflow, you will need to create a Github repository for the project.\nIn this post I expect the reader to have at least minimum experience with Git (create repositories, understand how branches work, git push, git pull.)\n\n\nStep 4. Set up Github Actions\nWe will need to go to the Github Actions Marketplace and look for ‚ÄúFTP Deploy‚Äù, or just click here.\nIn fact, to use this Action we will just need to copy and paste the .yml file as it is in the example from the Action‚Äôs page.\nInside your project, the .yml file needs to be located in the path .github/workflows/main.yml\nHowever, I did some changes, mostly based on this great video about this topic, but it is in Portuguese. I also did some other changes that were also needed to allow working with Quarto files structure.\non:\n  push:\n    branches:\n      - main\nname: üöÄ Deploy website on push\njobs:\n  web-deploy:\n    name: üéâ Deploy\n    runs-on: ubuntu-latest\n    steps:\n    - name: üöö Get latest code\n      uses: actions/checkout@v2\n    \n    - name: üìÇ Sync files\n      uses: SamKirkland/FTP-Deploy-Action@4.3.0\n      with:\n        server: ${{ secrets.ftp_host }}\n        username: ${{ secrets.ftp_user }}\n        password: ${{ secrets.ftp_password }}\n        local-dir: ./_site/\n        server-dir: ${{ secrets.server_dir }}\nBasically what these commands are doing is updating the files in the website Host after any push on main branch of the project.\n\nDetails about Github Secrets\nHere we are also using Github Secrets for the Host information.\nGithub Secrets will allow us to add private information, like passwords and usernames, without worrying about security.\nThey‚Äôll be securely saved on your Github account and you will call the variable that contains the ‚Äúsecrets‚Äù in your code. So this sensitive information doesn‚Äôt need to be hard coded.\nCheck out the screenshot below to see what Github Secrets looks like. You need to record them as they are being called (e.g.¬†ftp_host for secrets.ftp_user). Register the secrets with small letters and don‚Äôt worry if they appear with capital letters (see screenshot).\n\n\n\nUsing Github Secrets\n\n\nSome general comments:\n\nThe only needed information here is ftp_host, ftp_user and ftp_password. They are the same that you use for other commom FTP services.\nI added local-dir because of Quarto files structure.\nI used server-dir to specify the folder where the website will be (e.g.¬†public_html)."
  },
  {
    "objectID": "posts/website-with-quarto-automated-deployment/index.html#final-comments",
    "href": "posts/website-with-quarto-automated-deployment/index.html#final-comments",
    "title": "Set up a website with Quarto and automate deployment",
    "section": "Final comments",
    "text": "Final comments\nAfter all the steps above you are ready to git push your changes and submit a Pull Request to merge your local branch with the main branch (if you created a separated branch, which is highly recommended!).\nAfter merging with main, check if the files in your Host were updated. If yes, check if your website is now running on the internet.\nI am using Hostgator to host the website. And my first impression is good. The website quickly updates after the merging.\nDid you like this post? Leave your comments below and share your experience if you try to set up a website as I described here."
  },
  {
    "objectID": "posts/unicorn-companies-treemaps-in-r/index.html",
    "href": "posts/unicorn-companies-treemaps-in-r/index.html",
    "title": "Analyzing Unicorn Companies with treemaps in R",
    "section": "",
    "text": "Have you ever heard about Unicorn companies? This post shows a list of Unicorn companies around the world, analyzing them with data analysis techniques, using the R language.\nA Unicorn company is usually defined as a private startup valued at over U$ 1 billion.\nThe full and updated list of Unicorn companies in the world used on this analysis can be found here, at the CBInsights website.\nNote: the data for this post was downloaded on 1st October 2022.\nWhat will you see in this blog post?\nWhat technical skills will you find here?\nIn this kind of blog post, I won‚Äôt write any interpretations about the charts and tables, because I want to be able to update the data in the future without needing to replace text paragraphs. So, the idea is to keep the charts as self-explanatory as possible."
  },
  {
    "objectID": "posts/unicorn-companies-treemaps-in-r/index.html#reading-data-unicorn-companies-list",
    "href": "posts/unicorn-companies-treemaps-in-r/index.html#reading-data-unicorn-companies-list",
    "title": "Analyzing Unicorn Companies with treemaps in R",
    "section": "Reading data: Unicorn companies list",
    "text": "Reading data: Unicorn companies list\nFirst, we need to load the used packages and read the data. Below I am showing the first rows of the raw data and doing some data manipulations.\nIn this very beginning of the post some settings are already created, like the colors palette for Countries and Industries, to use in the whole document.\nThe next chunk of code is responsible to load the packages, read the data and create some useful variables, like valuation Quartiles, Number of Investors and Years as Unicorn.\n\n\nCode\n# Loading packages\nlibrary(dplyr)\nlibrary(echarts4r)\nlibrary(lubridate)\nlibrary(MetBrewer)\nlibrary(reactable)\nlibrary(readxl)\n\n# Reading the Excel file\nunicorn_data <- readxl::read_excel(\"unicorn_companies.xlsx\", skip = 2) |>\n  dplyr::arrange(dplyr::desc(\"Valuation ($B)\")) |>\n  dplyr::mutate(\n    `Years as Unicorn` = round(\n      (lubridate::interval(`Date Joined`, lubridate::today()) %/% months(1)) / 12,\n      digits = 2\n    ),\n    `Number of Investors` = stringr::str_count(`Select Investors`, ',') + 1,\n    `Industry` = as.factor(`Industry`),\n    Quartiles = dplyr::case_when(\n      `Valuation ($B)` <= quantile(`Valuation ($B)`, 0.25, na.rm = TRUE) ~ 'Q4',\n      `Valuation ($B)` <= quantile(`Valuation ($B)`, 0.5, na.rm = TRUE) ~ 'Q3',\n      `Valuation ($B)` <= quantile(`Valuation ($B)`, 0.75, na.rm = TRUE) ~ 'Q2',\n      `Valuation ($B)` <= quantile(`Valuation ($B)`, 1, na.rm = TRUE) ~ 'Q1'\n    )\n  )"
  },
  {
    "objectID": "posts/unicorn-companies-treemaps-in-r/index.html#valuation-by-country-and-industry",
    "href": "posts/unicorn-companies-treemaps-in-r/index.html#valuation-by-country-and-industry",
    "title": "Analyzing Unicorn Companies with treemaps in R",
    "section": "Valuation by Country and Industry",
    "text": "Valuation by Country and Industry\nAfter reading the data I have created two charts to briefly show the summarized data by Country and by Industry.\nIn this part I also create the color palettes that will be used in other charts as well.\nHere comes a nice tip: the usage of the R package MetBrewer to create very nice color palettes.\n\n\nCode\ncreate_color_palette <- function(vector, theme) {\n  dplyr::tibble(\n    name = vector,\n    itemStyle = dplyr::tibble(\n      color = as.character(MetBrewer::met.brewer(theme, length(vector)))\n    )\n  )\n}\n\nunicorn_data_by_country <- unicorn_data |>\n  dplyr::group_by(Country) |>\n  dplyr::summarise(`Valuation ($B)` = sum(`Valuation ($B)`)) |>\n  dplyr::arrange(dplyr::desc(`Valuation ($B)`)) |>\n  head(15)\n\ncolors_country <- create_color_palette(unicorn_data_by_country$Country, \"Derain\")\n\nunicorn_data_by_industry <- unicorn_data |>\n  dplyr::group_by(Industry) |>\n  dplyr::summarise(`Valuation ($B)` = sum(`Valuation ($B)`)) |>\n  dplyr::arrange(dplyr::desc(`Valuation ($B)`))\n\ncolors_industry <- create_color_palette(unicorn_data_by_industry$Industry, \"Juarez\")\n\n\nBelow we can see the sum of all the companies‚Äô Valuations for Industry and Country in a column chart.\n\n\nCode\nunicorn_data_by_industry |>\n  dplyr::left_join(\n    colors_industry |> dplyr::rename(Industry = name, color = `itemStyle`),\n    by = \"Industry\"\n  ) |>\n  echarts4r::e_charts(`Valuation ($B)`) |>\n  echarts4r::e_legend(show = FALSE) |>\n  echarts4r::e_bar(Industry) |>\n  echarts4r::e_y_axis(type = \"category\") |>\n  echarts4r::e_grid(containLabel = TRUE) |>\n  echarts4r::e_tooltip() |>\n  echarts4r::e_add_nested('itemStyle', color) |>\n  echarts4r::e_title(text = \"Unicorns by Industry\", subtext = \"Sum the valuation of all the Industries\")\n\n\n\n\n\n\n\n\nCode\nunicorn_data_by_country |>\n  dplyr::left_join(\n    colors_country |> dplyr::rename(Country = name, color = `itemStyle`),\n    by = \"Country\"\n  ) |> \n  echarts4r::e_charts(`Valuation ($B)`) |>\n  echarts4r::e_legend(show = FALSE) |>\n  echarts4r::e_bar(Country) |>\n  echarts4r::e_y_axis(type = \"category\") |>\n  echarts4r::e_grid(containLabel = TRUE) |>\n  echarts4r::e_tooltip() |>\n  echarts4r::e_add_nested('itemStyle', color) |>\n  echarts4r::e_title(text = \"Unicorns by Country\", subtext = \"Sum the valuation of the 15 first countries\")"
  },
  {
    "objectID": "posts/unicorn-companies-treemaps-in-r/index.html#exploring-the-top-50-unicorn-companies",
    "href": "posts/unicorn-companies-treemaps-in-r/index.html#exploring-the-top-50-unicorn-companies",
    "title": "Analyzing Unicorn Companies with treemaps in R",
    "section": "Exploring the top 50 Unicorn companies",
    "text": "Exploring the top 50 Unicorn companies\nIn this section I filtered the data just to show the first 50 Unicorn companies with the highest valuation.\nWe will see here an interactive table and also two treemaps, showing the data by Country and by Industry.\nI won‚Äôt show all the table here, because if you want to have access to the complete dataset, please check the CBInsights website.\nIn the table it is possible to sort the data by column and also search.\n\n\nCode\ninteractive_table_data <- unicorn_data |>\n  dplyr::select(-c(\"Date Joined\", \"Number of Investors\", \"Quartiles\")) |>\n  dplyr::mutate(`Years as Unicorn` = floor(`Years as Unicorn`)) |>\n  head(50)\n\n# Creating an interactive table\nreactable::reactable(\n  interactive_table_data,\n  columns = list(\n    `Select Investors` = colDef(minWidth = 180),\n    Country = colDef(html = TRUE)\n  ),\n  style = list(fontSize = \"0.70rem\"),\n  defaultPageSize = 5,\n  searchable = TRUE,\n  striped = TRUE,\n  resizable = TRUE\n)\n\n\n\n\n\n\n\nBelow it is possible to check two treemaps built with the R language. In the next section all the companies will be visible, but here we can see only the first 50.\nThe idea to show the following two treemaps is that as the number of companies is not so big, we can show all the 50 companies in only one view. So the user can compare companies that belong to different categories in the same chart.\nIf you want to explore all the companies from the data, please check the next section.\n\n\nCode\ntreemap_tooltip <- htmlwidgets::JS(\n      \"function(info){\n        var treePathInfo = info.treePathInfo;\n        var treePath = [];\n        for (var i = 1; i < treePathInfo.length; i++) {\n          treePath.push(treePathInfo[i].name);\n        }\n      return(\n        '<strong>' + echarts.format.encodeHTML(treePath.join(' / ')) + '</strong>' + '<br>' +\n        'Valuation ($B): <i>' + info.value + '</i><br>'\n      )}\"\n      )\n\nunicorn_data |>\n  dplyr::arrange(dplyr::desc(`Valuation ($B)`)) |>\n  head(50) |>\n  dplyr::select(Country, name = Company, value = `Valuation ($B)`) |>\n  tidyr::nest(children = c(\"name\", \"value\")) |>\n  dplyr::mutate(value = purrr::map_dbl(children, ~ sum(.x$value))) |>\n  dplyr::rename(name = Country) |>\n  dplyr::left_join(colors_country, by = \"name\") |>\n  echarts4r::e_charts() |>\n  echarts4r::e_title(text = \"Unicorns by Country\") |>\n  echarts4r::e_treemap(\n    leafDepth = 2,\n    itemStyle = list(normal = list(\n      borderWidth = 0,\n      gapWidth = 2,\n      backgroundColor = \"white\"\n    )),\n    upperLabel = list(\n      normal = list(\n        show = TRUE,\n        height = 30,\n        formatter = \"{b}\",\n        color = \"black\",\n        fontSize = 12\n      )\n    )\n  ) |>\n  echarts4r::e_tooltip(\n    backgroundColor = \"rgba(255,255,255,0.8)\",\n    formatter = treemap_tooltip\n  )\n\n\n\n\n\n\n\n\n\nCode\nunicorn_data |>\n  dplyr::arrange(dplyr::desc(`Valuation ($B)`)) |>\n  head(50) |>\n  dplyr::select(Industry, name = Company, value = `Valuation ($B)`) |>\n  tidyr::nest(children = c(\"name\", \"value\")) |>\n  dplyr::mutate(value = purrr::map_dbl(children, ~ sum(.x$value))) |>\n  dplyr::rename(name = Industry) |>\n  dplyr::left_join(colors_industry, by = \"name\") |>\n  echarts4r::e_charts() |>\n  echarts4r::e_title(text = \"Unicorns by Industry\") |>\n  echarts4r::e_treemap(\n    leafDepth = 2,\n    itemStyle = list(normal = list(\n      borderWidth = 0,\n      gapWidth = 2,\n      backgroundColor = \"white\"\n    )),\n    upperLabel = list(\n      normal = list(\n        show = TRUE,\n        height = 30,\n        formatter = \"{b}\",\n        color = \"black\",\n        fontSize = 12\n      )\n    )\n  ) |>\n  echarts4r::e_tooltip(\n    backgroundColor = \"rgba(255,255,255,0.8)\",\n    formatter = treemap_tooltip\n  )"
  },
  {
    "objectID": "posts/unicorn-companies-treemaps-in-r/index.html#exploring-all-unicorn-companies-with-treemaps",
    "href": "posts/unicorn-companies-treemaps-in-r/index.html#exploring-all-unicorn-companies-with-treemaps",
    "title": "Analyzing Unicorn Companies with treemaps in R",
    "section": "Exploring all Unicorn companies with treemaps",
    "text": "Exploring all Unicorn companies with treemaps\nThis section will show treemaps that allow the user to explore all the Unicorn companies in the dataset. For that, I created a function for the treemap(next chunk of code) and I also decided to plot them by quartiles of valuation, to facilitate the navigation.\n\n\nCode\ntree_map_chart <- function(data, quartile, colors_df, tooltip = treemap_tooltip) {\n  filtered_data <- data |> dplyr::filter(Quartiles == quartile) \n\n  treemap_data <- filtered_data |>\n    dplyr::arrange(dplyr::desc(`Valuation ($B)`)) |>\n    dplyr::filter(Quartiles == quartile) |>\n    dplyr::select(Industry, name = Company, value = `Valuation ($B)`) |>\n    tidyr::nest(children = c(\"name\", \"value\")) |>\n    dplyr::mutate(value = purrr::map_dbl(children, ~ sum(.x$value))) |>\n    dplyr::rename(name = Industry) |>\n    dplyr::left_join(colors_df, by = \"name\")\n\n  min_valuation <- min(filtered_data$`Valuation ($B)`)\n  max_valuation <- max(filtered_data$`Valuation ($B)`)\n\n  treemap_data |>\n    echarts4r::e_charts() |>\n    echarts4r::e_title(\n      text = paste0(\"Unicorns by Industry - from $\",  min_valuation, \"B to $\", max_valuation, \"B\", \"(\", quartile,\")\")\n    ) |>\n    echarts4r::e_treemap(\n      leafDepth = 1,\n      itemStyle = list(\n        normal = list(\n          borderWidth = 0,\n          gapWidth = 2,\n          backgroundColor = \"white\"\n        )\n      ),\n      upperLabel = list(\n        normal = list(\n          show = FALSE,\n          height = 30,\n          formatter = \"{b}\",\n          color = \"black\",\n          fontSize = 12\n        )\n      )\n    ) |>\n    echarts4r::e_tooltip(\n      backgroundColor = \"rgba(255,255,255,0.8)\",\n      formatter = treemap_tooltip\n    )\n}\n\n\nBelow we can see treemaps created in R, with the echarts4r library, with data split into quartiles.\nHow to navigate in those treemaps?\n\nClick on the desired Industry and see all the companies for that category.\nCheck the grey bar below the treemap, and click in the first grey square to go back to the initial view of the treemap.\n\n\n\nCode\nhtmltools::div(\n  tree_map_chart(data = unicorn_data, quartile = \"Q1\", colors_df = colors_industry),\n  htmltools::br(),\n  tree_map_chart(data = unicorn_data, quartile = \"Q2\", colors_df = colors_industry),\n  htmltools::br(),\n  tree_map_chart(data = unicorn_data, quartile = \"Q3\", colors_df = colors_industry),\n  htmltools::br(),\n  tree_map_chart(data = unicorn_data, quartile = \"Q4\", colors_df = colors_industry),\n)"
  },
  {
    "objectID": "posts/unicorn-companies-treemaps-in-r/index.html#unicorn-companies-in-brazil-my-country",
    "href": "posts/unicorn-companies-treemaps-in-r/index.html#unicorn-companies-in-brazil-my-country",
    "title": "Analyzing Unicorn Companies with treemaps in R",
    "section": "Unicorn companies in Brazil (my country)",
    "text": "Unicorn companies in Brazil (my country)\n\n\nCode\nunicorn_data |>\n  dplyr::arrange(dplyr::desc(`Valuation ($B)`)) |>\n  dplyr::filter(Country == \"Brazil\") |>\n  dplyr::select(Country, name = Company, value = `Valuation ($B)`) |>\n  tidyr::nest(children = c(\"name\", \"value\")) |>\n  dplyr::mutate(value = purrr::map_dbl(children, ~ sum(.x$value))) |>\n  dplyr::rename(name = Country) |>\n  dplyr::left_join(colors_country, by = \"name\") |>\n  echarts4r::e_charts() |>\n    echarts4r::e_title(text = \"Unicorns in Brazil\") |>\n    echarts4r::e_treemap(\n      leafDepth = 2,\n      itemStyle = list(\n        normal = list(\n          borderWidth = 0,\n          gapWidth = 2,\n          backgroundColor = \"white\"\n        )\n      ),\n      upperLabel = list(\n        normal = list(\n          show = TRUE,\n          height = 30,\n          formatter = \"{b}\",\n          color = \"black\",\n          fontSize = 12\n        )\n      )\n    ) |>\n    echarts4r::e_tooltip(\n      backgroundColor = \"rgba(255,255,255,0.8)\",\n      formatter = treemap_tooltip\n    )"
  },
  {
    "objectID": "posts/unicorn-companies-treemaps-in-r/index.html#final-comments",
    "href": "posts/unicorn-companies-treemaps-in-r/index.html#final-comments",
    "title": "Analyzing Unicorn Companies with treemaps in R",
    "section": "Final comments",
    "text": "Final comments\nThis post showed a brief example of generating an interactive report based on Data Analysis. This post shows how we can facilitate the understanding of a data set by plotting charts in an objective way.\nBelow are some points I‚Äôd like to highlight about the technical side from this blog post:\n\nWhen doing data analysis, try to keep the same colors for categorical variables in the whole study. It is basic, but requires some extra work, like creating a palette color and setting the desired colors usually as a column in the dataset. But this is a very important step to allow the user to quickly reach some conclusions from the data.\nTreemaps are very nice, but sometimes they are not clear about the size of some categories. So, other charts, like the column charts we used here, can help in understanding better the behavior of some categories.\n\nI hope you enjoyed this content. Please leave your comments below. If you want to see the updated version of this analysis, please also leave a comment."
  },
  {
    "objectID": "posts/predictive-customer-churn-analysis/index.html",
    "href": "posts/predictive-customer-churn-analysis/index.html",
    "title": "Predictive Customer Churn Analysis",
    "section": "",
    "text": "Attaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\n\n----------------------------------------------------------------------\n\nYour next step is to start H2O:\n    > h2o.init()\n\nFor H2O package documentation, ask for help:\n    > ??h2o\n\nAfter starting H2O, you can use the Web UI at http://localhost:54321\nFor more information visit https://docs.h2o.ai\n\n----------------------------------------------------------------------\n\n\n\nAttaching package: 'h2o'\n\n\nThe following objects are masked from 'package:stats':\n\n    cor, sd, var\n\n\nThe following objects are masked from 'package:base':\n\n    &&, %*%, %in%, ||, apply, as.factor, as.numeric, colnames,\n    colnames<-, ifelse, is.character, is.factor, is.numeric, log,\n    log10, log1p, log2, round, signif, trunc\n\n\nRows: 7043 Columns: 21\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr (17): customerID, gender, Partner, Dependents, PhoneService, MultipleLin...\ndbl  (4): SeniorCitizen, tenure, MonthlyCharges, TotalCharges\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n Connection successful!\n\nR is connected to the H2O cluster: \n    H2O cluster uptime:         15 minutes 59 seconds \n    H2O cluster timezone:       America/Sao_Paulo \n    H2O data parsing timezone:  UTC \n    H2O cluster version:        3.38.0.1 \n    H2O cluster version age:    4 months and 11 days !!! \n    H2O cluster name:           H2O_started_from_R_wrprates_npo413 \n    H2O cluster total nodes:    1 \n    H2O cluster total memory:   3.23 GB \n    H2O cluster total cores:    8 \n    H2O cluster allowed cores:  8 \n    H2O cluster healthy:        TRUE \n    H2O Connection ip:          localhost \n    H2O Connection port:        54321 \n    H2O Connection proxy:       NA \n    H2O Internal Security:      FALSE \n    R Version:                  R version 4.2.1 (2022-06-23) \n\n\nWarning in h2o.clusterInfo(): \nYour H2O cluster version is too old (4 months and 11 days)!\nPlease download and install the latest version from http://h2o.ai/download/\n\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\nWarning in .h2o.processResponseWarnings(res): Dropping bad and constant columns: [PaperlessBilling, MultipleLines, gender, InternetService, StreamingMovies, OnlineSecurity, StreamingTV, Dependents, OnlineBackup, DeviceProtection, PhoneService, TechSupport, PaymentMethod, Partner, Contract].\n\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=====================================================                 |  76%\n  |                                                                            \n  |======================================================================| 100%\n\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\nH2OBinomialMetrics: drf\n\nMSE:  0.170856\nRMSE:  0.4133474\nLogLoss:  0.8329624\nMean Per-Class Error:  0.2997877\nAUC:  0.7719825\nAUCPR:  0.5441511\nGini:  0.5439651\nR^2:  0.1177445\n\nConfusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n         No Yes    Error       Rate\nNo     1122 439 0.281230  =439/1561\nYes     177 379 0.318345   =177/556\nTotals 1299 818 0.290978  =616/2117\n\nMaximum Metrics: Maximum metrics at their respective thresholds\n                        metric threshold       value idx\n1                       max f1  0.256230    0.551674 257\n2                       max f2  0.050000    0.704011 372\n3                 max f0point5  0.569863    0.536398 121\n4                 max accuracy  0.781992    0.771847  54\n5                max precision  0.968462    0.857143  10\n6                   max recall  0.000000    1.000000 399\n7              max specificity  1.000000    0.998078   0\n8             max absolute_mcc  0.287875    0.362919 240\n9   max min_per_class_accuracy  0.235755    0.697630 269\n10 max mean_per_class_accuracy  0.256230    0.700212 257\n11                     max tns  1.000000 1558.000000   0\n12                     max fns  1.000000  541.000000   0\n13                     max fps  0.000000 1561.000000 399\n14                     max tps  0.000000  556.000000 399\n15                     max tnr  1.000000    0.998078   0\n16                     max fnr  1.000000    0.973022   0\n17                     max fpr  0.000000    1.000000 399\n18                     max tpr  0.000000    1.000000 399\n\nGains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`"
  },
  {
    "objectID": "posts/predictive-customer-churn-analysis/index.html#the-dataset",
    "href": "posts/predictive-customer-churn-analysis/index.html#the-dataset",
    "title": "Predictive Customer Churn Analysis",
    "section": "The dataset",
    "text": "The dataset"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "Predictive Customer Churn Analysis\n\n\n\n\n\n\n\nReporting\n\n\n\n\n\n\n\n\n\n\n\nFeb 1, 2023\n\n\nWlademir Ribeiro Prates\n\n\n\n\n\n\n  \n\n\n\n\nAnalyzing Unicorn Companies with treemaps in R\n\n\n\n\n\n\n\nReporting\n\n\n\n\n\n\n\n\n\n\n\nAug 20, 2022\n\n\nWlademir Ribeiro Prates\n\n\n\n\n\n\n  \n\n\n\n\nSet up a website with Quarto and automate deployment\n\n\n\n\n\n\n\nReporting\n\n\n\n\n\n\n\n\n\n\n\nJul 2, 2022\n\n\nWlademir Ribeiro Prates\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi, I am Wlademir Ribeiro Prates. Welcome to my personal blog.\nI am a Senior Data Scientist. Experienced R and Shiny developer, with examples of use cases in several large companies. Experienced with machine learning implementation to solve business problems. PhD and Master‚Äôs in Finance. Researcher in behavioral finance / economics, and capital markets. I also have a website, where articles about business, technology and data science are published."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About",
    "section": "Education",
    "text": "Education\n\n2012-2016 - PhD in Finance (UFSC)\n2010-2012 - Master‚Äôs in Finance (UFSC)\n2006-2009 - Undergraduate in Business Administration (Anhanguera)"
  }
]