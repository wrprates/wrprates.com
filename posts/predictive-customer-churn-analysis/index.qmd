---
title: "Predictive Customer Churn Analysis"
author: "Wlademir Ribeiro Prates"
date: "2023-02-01"
categories: [Reporting]
image: preview.png
---

```{r}
#| warning: false
#| message: false
#| echo: false
#| include: false

library(downloadthis)
library(dplyr)
library(h2o)
library(highcharter)
library(readr)
library(reactable)

# Preparing objects
ml <- list()
colors <- c("#e8e9ed", "#e89978", "#4a57a6", "#4192b5")

# Start h2o cluster
h2o::h2o.init()

# Reading the data
ml$data$raw <- readr::read_csv(
  "https://raw.githubusercontent.com/wrprates/open-data/master/telco_customer_churn.csv"
) |>
  dplyr::mutate(across(where(is.character), as.factor))

# Defining variables
ml$vars$y <- "Churn"
ml$vars$discard <- "customerID"
ml$vars$x <- setdiff(names(ml$data$raw), c(ml$vars$y, ml$vars$discard))

# Setup h2o
ml$data$h2o <- h2o::as.h2o(ml$data$raw)
ml$data$splits <- h2o::h2o.splitFrame(ml$data$h2o, ratios = 0.7)
names(ml$data$splits) <- c("train", "test")

# Running the model
ml$model <- h2o::h2o.gbm(x = ml$vars$x, y = ml$vars$y, training_frame = ml$data$splits$train)
ml$predictions <- h2o::h2o.predict(ml$model, ml$data$splits$test)
h2o::h2o.performance(ml$model, ml$data$splits$test)

ml$data$predictions <- ml$data$splits$test |>
  tibble::as_tibble() |>
  dplyr::bind_cols(
    dplyr::as_tibble(ml$predictions) |> 
      dplyr::select(Predict = predict, PredictProbability = Yes) |>
      dplyr::mutate(PredictProbability = round(100*PredictProbability, 2))
  ) |>
  # 11 is not a magic number, it is inverting the order of the deciles
  dplyr::mutate(RiskGroup = as.factor(11 - dplyr::ntile(PredictProbability, 10))) |>
  dplyr::select(customerID, Churn, Predict, PredictProbability, RiskGroup, dplyr::everything()) |>
  dplyr::arrange(dplyr::desc(PredictProbability))

# Overall Churn
ml$data$overall_churn <- ml$data$raw |>
  dplyr::group_by(Churn) |>
  dplyr::tally() |>
  dplyr::mutate(
    `% Customers` = round(100 * n / sum(n), 2),
    Customer = "Churn Yes / No"
  ) |>
  dplyr::rename(`Count Customers` = n)

ml$charts$overall_churn <- ml$data$overall_churn |>
  highcharter::hchart(
    hcaes(x = Customer, y = `% Customers`, group = Churn),
    type = "bar",
    stacking = "normal",
    dataLabels = list(enabled = TRUE)
  ) |>
  highcharter::hc_title(text = "Overall company's Churn") |>
  highcharter::hc_size(width = NULL, height = 200) |>
  highcharter::hc_xAxis(title = list(text = "")) |>
  highcharter::hc_yAxis(max = 100) |>
  highcharter::hc_colors(colors)

# Variables importance
ml$vars$importance <- h2o::h2o.varimp(ml$model) |>
    tibble::as_tibble()

ml$charts$vars_importance <- highcharter::highchart() |>
    highcharter::hc_add_series(ml$vars$importance$percentage*100, name = "") |>
    highcharter::hc_chart(type = "bar") |>
    highcharter::hc_xAxis(categories = ml$vars$importance$variable) |>
    highcharter::hc_yAxis(
      title = list(text = "Percentual de Importância"), labels = list(format = "{value}%")
    ) |>
    highcharter::hc_chart(zoomType = "xy") |>
    highcharter:: hc_colors(colors[4]) |>
    highcharter:: hc_legend(enabled = FALSE) |>
    highcharter::hc_tooltip(
      formatter = JS(
        "function(){return  'Importância (%): <b>' + Highcharts.numberFormat(this.y) + '%</b>';}"
      ),
      useHTML = FALSE
    ) |>
    highcharter::hc_title(text = "Importância das Variáveis") |>
    highcharter::hc_subtitle(text = "Base para <i>Feature Selection</i>") |>
    highcharter::hc_size(width = NULL, height = 500)

# h2o::h2o.pd_plot(
#    object = ml$model,
#    newdata = ml$data$splits$test,
#    column = c("Contract")
# )

# Calculates active and canceled customers and cumulative canceled for each decile
ml$data$chrun_by_risk_groups <- ml$data$predictions |>
  dplyr::group_by(RiskGroup, Churn) |>
  dplyr::tally() |>
    dplyr::mutate(prop = 100 * n / sum(n)) |>
    dplyr::ungroup() |>
    dplyr::group_by(Churn) |>
    dplyr::mutate(
      prop_bad_good = 100 * n / sum(n),
      cum_prop = cumsum(prop_bad_good),
      n_cum_sum = cumsum(n)) |>
    dplyr::ungroup() |>
    dplyr::group_by(RiskGroup) |> 
    dplyr::mutate(precisao = 100 * n_cum_sum / sum(n_cum_sum)) |>
    dplyr::ungroup() |>
    dplyr::mutate(across(.cols = c("prop", "prop_bad_good", "cum_prop", "precisao"), .fns = round, 2 ))

# Chart with risk groups by deciles
ml$charts$risk_groups_churn <- ml$data$chrun_by_risk_groups |>
  highcharter::hchart(hcaes(x = RiskGroup, y = prop, group = Churn), type = "column") |>
  highcharter::hc_add_series(
    name="% Acumulado de Cancelados (sensibilidade)",
    data = (ml$data$chrun_by_risk_groups %>% dplyr::filter(Churn == "Yes"))$cum_prop,
    type = "line",
    dashStyle = "DashDot",
    opposite = FALSE,
    dataLabels = list(
      enabled = TRUE,
      color = "#666",
      style = list(fontSize = "16px"),
      formatter = JS("function () {if(this.y===0){return null;} return Math.round( this.y ) + '%'; }")
    )
  ) |>
    highcharter::hc_yAxis(title = list(text = "Proporção (%)"), max = 100) |>
    highcharter::hc_xAxis(title = list(text = "Decil de Score")) |>
    highcharter::hc_colors(colors) |>
    highcharter::hc_plotOptions(column = list(
      stacking = "normal",
      dataLabels = list(
        enabled = TRUE,
        color = "black",
        style = list(fontSize = "17px"),
        formatter = JS("function () {
          if(this.y===0){return null;} return Math.round(100 * this.y / this.total) + '%';
        }")
      )
    )) |>
    highcharter::hc_tooltip(
      table = FALSE,
      shared = TRUE,
      split = FALSE,
      headerFormat = "<span style='font-size: 14px'>{point.key}</span><br/>",
      pointFormat = "<span style='font-size: 22px; color:{point.color}'>\u25CF</span>
        <span style='font-size: 16px;'>{series.name}:</span>
        <span style='font-size: 16px; font-weight: bold;'>{point.y}</span> <br/>"
    ) |>
    highcharter::hc_title(text = "Prop. Cancelados e Ativos em Decis de Score") 
```


## How is the company's churn today?

Stacked bar chart with overall Churn. With real data we can show montlhy Churn.

```{r}
ml$charts$overall_churn
```

## The predictive model

Machine learning model description.

### Variables importance

```{r, echo=FALSE}
ml$charts$vars_importance
```

## Customers to be prioritized with actions

Stacked column chart with predictions probabilities split in deciles.

```{r}
ml$charts$risk_groups_churn
```


## Data with predictions

Table with predictions.

```{r}
ml$data$predictions |>
  reactable::reactable(
    columns = list(
      `Contract` = colDef(minWidth = 150),
      `PaymentMethod` = colDef(minWidth = 150)
    ),
    highlight = TRUE,
    striped = FALSE,
    filterable = TRUE,
    searchable = FALSE,
    compact = TRUE,
    borderless = TRUE,
    defaultPageSize = 7
  )
```


```{r}
downloadthis::download_this(
  ml$data$predictions,
  button_label = "Download predictions",
  output_name = "customer_churn_prediction",
  output_extension = ".xlsx",
  button_type = "default"
)
```
