{
  "hash": "0d10a982249947ee6a0d6ce74c83b12d",
  "result": {
    "markdown": "---\ntitle: \"How to Get Yearly Dividends for Any Stock with R?\"\nauthor: \"Wlademir Ribeiro Prates\"\ndate: \"2023-10-09\"\ncategories: [Reporting, Data Science, Machine Learning]\nimage: preview.png\nformat:\n  html:\n    include-after-body: disqus.html\n---\n\n\n\n\n\nInvesting in stocks is more than just looking at price appreciation. Dividends are a crucial part of the equation. Especially for investors who prioritize income generation, knowing the dividends a stock yields year-over-year can be invaluable. In this post, I'll guide you through a streamlined method using R to pull yearly dividend data for any stock. \n\n**Dividends** are payments made by corporations to their shareholders, often as a distribution of profits. When analyzing stocks from a long-term perspective, dividends can make a significant difference in the total returns an investor receives.\n\n**In this blog post, you will discover**:\n\n- How to pull yearly dividends data for stocks using R.\n- Fetching the closing price of the stock at the end of each year.\n- Calculating yearly yield based on dividends and the closing price.\n\n**R tools and techniques covered here**:\n\n- Leveraging the `quantmod` package to pull stock data.\n- Employing the `dplyr` package for data wrangling.\n- Using `purrr` for functional programming within R.\n\n\n## Fetching Yearly Dividends\n\nTo get yearly dividends for a stock, we make use of the `quantmod` package which interfaces with various sources online to fetch stock data. Here's the code chunk to pull yearly dividends:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(quantmod)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: xts\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: zoo\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'zoo'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: TTR\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:xts':\n\n    first, last\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nget_yearly_dividends <- function(ticker, years) {\n  historical_dividends <- quantmod::getDividends(\n    Symbol = ticker,\n    from = paste0(min(years), \"-01-01\"),\n    to = paste0(max(years), \"-12-31\")\n  ) |>\n    setNames(\"dividends\")\n  \n  yearly_data <- historical_dividends |>\n    dplyr::as_tibble(rownames = \"date\") |>\n    dplyr::mutate(\n      ticker = gsub(\".SA\", \"\", ticker),\n      year = lubridate::year(date)\n    ) |>\n    group_by(year) |>\n    dplyr::summarise(\n      dividends = sum(dividends)\n    )\n  \n  return(yearly_data)\n}\n```\n:::\n\n\n\n## Getting Yearly Closing Price\n\nWhile dividends tell half the story, to evaluate the attractiveness of the dividends, we need to know at what price the stock closed at the end of each year. Here's how we can fetch that data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_yearly_closing_price <- function(ticker, years) {\n  historical_prices <- quantmod::getSymbols(\n    Symbol = ticker,\n    from = paste0(min(years), \"-01-01\"),\n    to = paste0(max(years), \"-12-31\"),\n    auto.assign = FALSE\n  ) |>\n    dplyr::as_tibble(rownames = \"date\") |>\n    dplyr::select(date, tidyr::contains(\"Adjusted\")) |>\n    setNames(c(\"date\", \"price\")) |>\n    dplyr::mutate(\n      ticker = gsub(\".SA\", \"\", ticker),\n      year = lubridate::year(date)\n    ) |>\n    group_by(year) |>\n    dplyr::summarise(\n      price = last(price)\n    )\n  return(historical_prices)\n}\n```\n:::\n\n\n\n## Calculating Yearly Yield\n\nCombining the dividends and the closing price, we can calculate the yield for the stock year-over-year:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_yearly_yield <- function(ticker, years) {\n  yearly_yields <- get_yearly_dividends(ticker, years) |>\n    dplyr::left_join(\n      get_yearly_closing_price(ticker, years),\n      by = \"year\"\n    ) |>\n    dplyr::mutate(\n      ticker = gsub(\".SA\", \"\", ticker),\n      yield = round(100 * dividends / price, 4)\n    )\n  \n  return(yearly_yields)\n}\n\nget_yearly_yield(\"TAEE11.SA\", c(2020:2023))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in read.table(file = file, header = header, sep = sep,\nquote = quote, : incomplete final line found by readTableHeader on\n'https://query1.finance.yahoo.com/v7/finance/download/TAEE11.SA?\nperiod1=-2208988800&period2=1696809600&interval=1d&events=split'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: TAEE11.SA contains missing values. Some functions will not work if\nobjects contain missing values in the middle of the series. Consider using\nna.omit(), na.approx(), na.fill(), etc to remove or replace them.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 5\n   year dividends price ticker yield\n  <dbl>     <dbl> <dbl> <chr>  <dbl>\n1  2020      3.21  25.7 TAEE11 12.5 \n2  2021      4.50  31.4 TAEE11 14.4 \n3  2022      3.50  32.4 TAEE11 10.8 \n4  2023      2.32  33.9 TAEE11  6.85\n```\n:::\n:::\n\n\n## A Practical Example\n\nLet's take a few tickers as an example and pull their yearly yields:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(purrr)\ntickers <- c(\n  \"TAEE11\",\n  \"TRPL4\",\n  \"ALUP11\",\n  \"RADL3\"\n)\n\ndados <- purrr::map(\n  paste0(tickers, \".SA\"),\n  get_yearly_yield,\n  c(2015:2023)\n) |> \n  setNames(tickers)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in read.table(file = file, header = header, sep = sep,\nquote = quote, : incomplete final line found by readTableHeader on\n'https://query2.finance.yahoo.com/v7/finance/download/TAEE11.SA?\nperiod1=-2208988800&period2=1696809600&interval=1d&events=split'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: TAEE11.SA contains missing values. Some functions will not work if\nobjects contain missing values in the middle of the series. Consider using\nna.omit(), na.approx(), na.fill(), etc to remove or replace them.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in read.table(file = file, header = header, sep = sep,\nquote = quote, : incomplete final line found by readTableHeader\non 'https://query1.finance.yahoo.com/v7/finance/download/TRPL4.SA?\nperiod1=-2208988800&period2=1696809600&interval=1d&events=split'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in read.table(file = file, header = header, sep = sep,\nquote = quote, : incomplete final line found by readTableHeader on\n'https://query1.finance.yahoo.com/v7/finance/download/ALUP11.SA?\nperiod1=-2208988800&period2=1696809600&interval=1d&events=split'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in read.table(file = file, header = header, sep = sep,\nquote = quote, : incomplete final line found by readTableHeader\non 'https://query1.finance.yahoo.com/v7/finance/download/RADL3.SA?\nperiod1=-2208988800&period2=1696809600&interval=1d&events=split'\n```\n:::\n\n```{.r .cell-code}\ndados\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$TAEE11\n# A tibble: 9 × 5\n   year dividends price ticker yield\n  <dbl>     <dbl> <dbl> <chr>  <dbl>\n1  2015      1.96  7.66 TAEE11 25.6 \n2  2016      2.70 10.9  TAEE11 24.9 \n3  2017      1.77 12.1  TAEE11 14.6 \n4  2018      2.79 15.3  TAEE11 18.3 \n5  2019      1.89 21.5  TAEE11  8.79\n6  2020      3.21 25.7  TAEE11 12.5 \n7  2021      4.50 31.4  TAEE11 14.4 \n8  2022      3.50 32.4  TAEE11 10.8 \n9  2023      2.32 33.9  TAEE11  6.85\n\n$TRPL4\n# A tibble: 8 × 5\n   year dividends price ticker yield\n  <dbl>     <dbl> <dbl> <chr>  <dbl>\n1  2015    0.142   6.37 TRPL4   2.22\n2  2016    0.0939  9.28 TRPL4   1.01\n3  2017    0.190  10.0  TRPL4   1.89\n4  2018    0.785  12.4  TRPL4   6.32\n5  2019    1.51   17.3  TRPL4   8.73\n6  2020    1.89   23.0  TRPL4   8.22\n7  2021    3.59   23.2  TRPL4  15.5 \n8  2022    1.06   23    TRPL4   4.62\n\n$ALUP11\n# A tibble: 9 × 5\n   year dividends price ticker yield\n  <dbl>     <dbl> <dbl> <chr>  <dbl>\n1  2015     0.902  8.00 ALUP11 11.3 \n2  2016     0.672 12.7  ALUP11  5.28\n3  2017     0.474 14.1  ALUP11  3.36\n4  2018     0.666 14.6  ALUP11  4.56\n5  2019     0.416 22.7  ALUP11  1.83\n6  2020     0.638 22.4  ALUP11  2.84\n7  2021     0.777 20.8  ALUP11  3.73\n8  2022     1.14  25.6  ALUP11  4.43\n9  2023     1.68  28.4  ALUP11  5.92\n\n$RADL3\n# A tibble: 9 × 5\n   year dividends price ticker yield\n  <dbl>     <dbl> <dbl> <chr>  <dbl>\n1  2015    0.0201  6.36 RADL3  0.316\n2  2016    0.0219 11.1  RADL3  0.197\n3  2017    0.0227 16.8  RADL3  0.135\n4  2018    0.0235 10.5  RADL3  0.223\n5  2019    0.0237 20.7  RADL3  0.114\n6  2020    0.0674 23.4  RADL3  0.288\n7  2021    0.205  22.9  RADL3  0.896\n8  2022    0.235  22.6  RADL3  1.04 \n9  2023    0.202  27.5  RADL3  0.732\n```\n:::\n:::\n\n\n\nNow, let's visualize the yearly dividend yield for these stocks:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Loading necessary packages\nlibrary(echarts4r)\nlibrary(tidyr)\n\n# Transforming the data for plotting\n# \"dados\" means \"data\" in Portuguese, so let's call our data \"stock_data\"\nstock_data <- dados |>\n  bind_rows(.id = \"ticker\") |>\n  mutate(year = as.factor(year))\n  \nstock_data |>\n  group_by(ticker) |>\n  e_charts(year) |>\n  e_line(yield) |>\n  e_y_axis(name = \"Yield (%)\") |>\n  e_theme(\"wonderland\") |> \n  e_tooltip(trigger = \"axis\") \n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-0b72da03e2b3b7a355c9\" style=\"width:100%;height:500px;\" class=\"echarts4r html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-0b72da03e2b3b7a355c9\">{\"x\":{\"theme\":\"wonderland\",\"tl\":false,\"draw\":true,\"renderer\":\"canvas\",\"events\":[],\"buttons\":[],\"opts\":{\"yAxis\":[{\"show\":true,\"name\":\"Yield (%)\"}],\"xAxis\":[{\"data\":[\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\",\"2022\",\"2023\"],\"type\":\"category\",\"boundaryGap\":true}],\"legend\":{\"data\":[\"ALUP11\",\"RADL3\",\"TAEE11\",\"TRPL4\"]},\"series\":[{\"data\":[{\"value\":[\"2015\",\"11.2724\"]},{\"value\":[\"2016\",\" 5.2821\"]},{\"value\":[\"2017\",\" 3.3596\"]},{\"value\":[\"2018\",\" 4.5647\"]},{\"value\":[\"2019\",\" 1.8324\"]},{\"value\":[\"2020\",\" 2.8433\"]},{\"value\":[\"2021\",\" 3.7315\"]},{\"value\":[\"2022\",\" 4.4336\"]},{\"value\":[\"2023\",\" 5.9217\"]}],\"yAxisIndex\":0,\"xAxisIndex\":0,\"name\":\"ALUP11\",\"type\":\"line\",\"coordinateSystem\":\"cartesian2d\"},{\"data\":[{\"value\":[\"2015\",\"0.3164\"]},{\"value\":[\"2016\",\"0.1973\"]},{\"value\":[\"2017\",\"0.1354\"]},{\"value\":[\"2018\",\"0.2232\"]},{\"value\":[\"2019\",\"0.1144\"]},{\"value\":[\"2020\",\"0.2880\"]},{\"value\":[\"2021\",\"0.8957\"]},{\"value\":[\"2022\",\"1.0401\"]},{\"value\":[\"2023\",\"0.7325\"]}],\"yAxisIndex\":0,\"xAxisIndex\":0,\"name\":\"RADL3\",\"type\":\"line\",\"coordinateSystem\":\"cartesian2d\"},{\"data\":[{\"value\":[\"2015\",\"25.5659\"]},{\"value\":[\"2016\",\"24.9124\"]},{\"value\":[\"2017\",\"14.5869\"]},{\"value\":[\"2018\",\"18.2554\"]},{\"value\":[\"2019\",\" 8.7852\"]},{\"value\":[\"2020\",\"12.4726\"]},{\"value\":[\"2021\",\"14.3650\"]},{\"value\":[\"2022\",\"10.7949\"]},{\"value\":[\"2023\",\" 6.8539\"]}],\"yAxisIndex\":0,\"xAxisIndex\":0,\"name\":\"TAEE11\",\"type\":\"line\",\"coordinateSystem\":\"cartesian2d\"},{\"data\":[{\"value\":[\"2015\",\" 2.2234\"]},{\"value\":[\"2016\",\" 1.0121\"]},{\"value\":[\"2017\",\" 1.8912\"]},{\"value\":[\"2018\",\" 6.3164\"]},{\"value\":[\"2019\",\" 8.7255\"]},{\"value\":[\"2020\",\" 8.2200\"]},{\"value\":[\"2021\",\"15.4570\"]},{\"value\":[\"2022\",\" 4.6191\"]}],\"yAxisIndex\":0,\"xAxisIndex\":0,\"name\":\"TRPL4\",\"type\":\"line\",\"coordinateSystem\":\"cartesian2d\"}],\"tooltip\":{\"trigger\":\"axis\"}},\"dispose\":true},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n## Conclusion\n\nUsing R, we have streamlined the process of fetching and analyzing yearly dividend data for stocks. This method allows investors and analysts to quickly evaluate the attractiveness of dividends over the years. By understanding the yearly yields, one can make better-informed decisions regarding their investments. As always, ensure that dividends are just one part of your holistic analysis when evaluating stocks. Happy investing!\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/echarts4r-4.8.0/echarts-en.min.js\"></script>\n<script src=\"../../site_libs/echarts4r-4.8.0/ecStat.min.js\"></script>\n<script src=\"../../site_libs/echarts4r-4.8.0/dataTool.min.js\"></script>\n<script src=\"../../site_libs/echarts4r-binding-0.4.4/echarts4r.js\"></script>\n<script src=\"../../site_libs/wonderland-1.0.0/wonderland.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}